/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("//row 와 col은 createNumberBox나 checkNum 등 많은 곳엣 사용\r\n//행\r\nlet row = null;\r\n//열\r\nlet col = null;\r\n//정답이 포함된 숫자들이 있는 전역변수\r\n//정답의 숫자들을 하나하나를 배열로 담음\r\nlet num = { answer: [], question: [] };\r\n//상황에 따라 팝업을 닫고 열어주는 전역변수\r\n//팝업을 닫아줄 변수\r\nlet isClosePop = false;\r\n//각 값이 모두 true때(입력한 값이 정상적일때) 게임 시작\r\n//0번째는 row의 pass 조건, 1번째는 col의 pass 조건\r\nlet passRowNCol = [false, false];\r\n//자주 쓰는 클래스네임\r\nlet BOX_ELEMENT = document.getElementsByClassName(\"boxElement\");\r\n\r\n//style 관련 메서드\r\nfunction changeText(area, text, i) {\r\n  if (!i) {\r\n    i = 0;\r\n  }\r\n  const dou = document.getElementById(area)\r\n    ? document.getElementById(area)\r\n    : document.getElementsByClassName(area)[i];\r\n    console.log(dou,text)\r\n  dou.innerText = text;\r\n}\r\nfunction showNhideArea(area, flag) {\r\n  const dou = document.getElementById(area)\r\n    ? document.getElementById(area)\r\n    : document.getElementsByClassName(area)[0];\r\n  dou.style.display = flag;\r\n}\r\nfunction inNOutArea(area, value) {\r\n  const dou = document.getElementById(area)\r\n    ? document.getElementById(area)\r\n    : document.getElementsByClassName(area)[0];\r\n  dou.style.right = value + \"px\";\r\n}\r\n\r\nfunction setColor(area, i) {\r\n  document.getElementById(area).children[i].style.color = \"blue\";\r\n  document.getElementById(area).children[i].style.fontSize = \"60px\";\r\n}\r\n//랜던 함수를 추출하는 메서드\r\nconst setRandomNum = function (count, option, limit) {\r\n  let num = [];\r\n  while (true) {\r\n    //중복 허용되고 리미트(값의 최대값)이 없을때\r\n    if (!option.duplication && !limit) {\r\n      let randomNum = Math.floor(Math.random() * 10);\r\n      for (let i = 0; i < count; i++) {\r\n        randomNum = Math.floor(Math.random() * 10);\r\n        num.push(randomNum);\r\n      }\r\n      break;\r\n      //중복 허용되고 리미트 값 없을때\r\n    } else if (option.duplication && !limit) {\r\n      let randomNum = Math.floor(Math.random() * 10);\r\n      if (!num.includes(randomNum)) {\r\n        num.push(randomNum);\r\n      } else {\r\n        continue;\r\n      }\r\n      if (num.length === count) {\r\n        break;\r\n      }\r\n      //중복 허용되고 리미트 값 있을때\r\n    } else if (option.duplication && limit) {\r\n      let randomNum = Math.floor(Math.random() * 100) % limit;\r\n      if (num.length < count) {\r\n        if (num.includes(randomNum % limit)) {\r\n          continue;\r\n        } else if (!num.includes(randomNum % limit)) {\r\n          num.push(randomNum % limit);\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return num;\r\n};\r\n\r\n//엔터와 클릭으로 실행할 수 있다\r\nasync function insertNumber() {\r\n  if (!Boolean(passRowNCol)) {\r\n    alert(\"입력값을 확인해주세요\");\r\n    return;\r\n  }\r\n  //상자의 가로 세로 갯수\r\n  // rowNCol.push(row);\r\n  // rowNCol.push(col);\r\n  let answerLength;\r\n  //큰 숫자 만큼 정답의 숫자 갯수가 정해짐!\r\n  row > col ? (answerLength = row) : (answerLength = col);\r\n  //랜덤숫자메서드를 중복가능하게 num.question을 만듬\r\n  num.question = setRandomNum(row * col, { duplication: false });\r\n  //앞에 num.question 의 숫자들이 num.answer\r\n  num.answer = num.question.slice(0, answerLength);\r\n  //중복을 허용하고 리미트를 둔 랜덤메서드를 구현하여 박스에 들어갈 값이 있는 boxValue에 들어갈 공간의 값을 설정\r\n  let indexForStore = setRandomNum(row * col, { duplication: true }, row * col);\r\n  /**순차적으로 글씨가 칠해지는 기능을 위한 작업/ answerOrder에는 박스에 넣은 값의 공간값을 저장!,\r\n   boxValueOrder은 해당 답변이 몇번째 박스에 있는지 저장\r\n   이때 치명적 문제가 있는데, num.aswer의 배열을 공간값 랜덤으로 상자에 넣었기 때문에 정답이 순서대로 보여지지 않음!\r\n   ex)[3,1,2,0] (answer.order) [7,1,9,5] 처음으로 들어간건 3번째 정답의 값이 7번째 상자에 들어갔다는 의미,,\r\n   맨처음에 보여질 정답은 3번째의 정답 값임으로 순서대로 정답을 입력해야하는 이 게임에 적합하지 않음\r\n   아래에 수정사항이 나옴,, 좀 복잡하게 푼 감도,,,\r\n  */\r\n\r\n  //num.ques를 랜덤으로 담아줄, 또 순차적으로 li에 뿌려줄 배열\r\n  let boxValue = [];\r\n  //비동기를 통해 답이 몇번째 상자에 들어갔는지 확인해주는 객체변수\r\n  let setShowingAnswer = { answerOrder: [], boxValueOrder: [] };\r\n  for (let ii = 0; ii < row * col; ii++) {\r\n    if (indexForStore[ii] < num.answer.length) {\r\n      setShowingAnswer.boxValueOrder.push(ii);\r\n      setShowingAnswer.answerOrder.push(indexForStore[ii]);\r\n    }\r\n    //boxValue에 있는 값이 순서대로 박스에 들어감, boxValue에 들어가는 num.question의 순서는 indexForStore를 이용\r\n    boxValue.push(num.question[indexForStore[ii]]);\r\n  }\r\n  //이 메서드는 함수의 역할은 공간값을 저장하는 배열의 각 값의 index를 순서대로 정리해주는 메서드\r\n  //위에 [3,1,2,0]의 공간값 저장배열이라면 [3(0이 3번째),1(1이 1번째),2(2가 2번째),0(3이 0번째)]\r\n  //이 메서드를 통해 answerOrder를 정리\r\n  returnIndex(setShowingAnswer.answerOrder);\r\n  createNumberBox(boxValue);\r\n  setArrow();\r\n  changeText(\"textPop\", \"정답은???\");\r\n  changeText(\"answerText\", `${num.answer}`);\r\n  showNhideArea(\"submitPop\", \"none\");\r\n  showNhideArea(\"answerView\", \"block\");\r\n  showNhideArea(\"setNumArea\", \"none\");\r\n  showNhideArea(\"collect\", \"block\");\r\n  await closeAnswer();\r\n  //이 후 answerOrder을 정리하는 함수의 리턴 값을 이용해 seTime함수를 실행\r\n  for (let i in setShowingAnswer.answerOrder) {\r\n    await asyncSetColor(\r\n      setShowingAnswer.boxValueOrder[\r\n        returnIndex(setShowingAnswer.answerOrder)[i]\r\n      ]\r\n    );\r\n  }\r\n}\r\nfunction closeAnswer() {\r\n  return new Promise((resolve) => {\r\n    setTimeout(function () {\r\n      closePopup(\"pop\");\r\n      resolve();\r\n    }, 1000);\r\n    isClosePop = true;\r\n  });\r\n}\r\n//new) 어떤 공간값을 담은 배열 속에 값들을 0부터 배열의 길이의 값이 있는 공간값을 저장 ex)[2,0,1]=>[1,2,0]\r\nfunction returnIndex(array) {\r\n  let newA = [];\r\n  array.forEach ((value,index)=>{\r\n    for (let v in array) {\r\n      if (array[v] === index) {\r\n        newA.push(v);\r\n      }\r\n    }\r\n  })\r\n  return newA;\r\n}\r\n\r\nfunction asyncSetColor(i) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(function () {\r\n      setColor(\"box\", i);\r\n      returnOrigin(i);\r\n      resolve();\r\n    }, 500);\r\n  });\r\n}\r\nfunction returnOrigin(i) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => {\r\n      BOX_ELEMENT[i].style.fontSize = \"1em\";\r\n      BOX_ELEMENT[i].style.color = \"#000\";\r\n      resolve();\r\n    }, 300)\r\n  );\r\n}\r\n\r\n//처음에 submit 할때 boxRowCol 입력한 값을 넣게 했으나 정규식 확인을 효율적으로 할 수 있어 keyup 에 넣음\r\nfunction checkNum(index) {\r\n  //에러 메세지를 저장해서, 오류 생기면 alert(errorMessage)\r\n  let errorMessage = \"\";\r\n  let number = document.querySelectorAll(\".setNum\");\r\n  //백스페이스와 새로고침 누를 때는 이 메서드 실행하지 말아주세요\r\n  if (event.keyCode == 116 || event.keyCode === 8) {\r\n    return false;\r\n  }\r\n  //정규식 test를 거치고 return 한 값을 value로 받음\r\n  if (regexNumber(number[index].value) === \"\") {\r\n    alert(errorMessage);\r\n    number[index].value = number[index].value.substring(0, 1);\r\n    passRowNCol[index] = false;\r\n    return;\r\n  }\r\n  //입력한 값을 rowNCol에\r\n  // rowNCol[index] = number[index].value;\r\n  //박스 게임 생성 배열 true\r\n  passRowNCol[index] = true;\r\n  index === 0 ? (row = number[index].value) : (col = number[index].value);\r\n  //엔터 칠때 구현 메서드 첫번째 인풋일땐 두번째 인풋으로 이동, 두번째 인풋일땐 submit으로;\r\n  if (event.keyCode === 13) {\r\n    if (index === 0) {\r\n      number[1].focus();\r\n    } else {\r\n      insertNumber();\r\n    }\r\n  }\r\n}\r\n//숫자만 받는 메서드\r\nfunction regexNumber(value) {\r\n  let regex = /^[0-9]/g;\r\n  if (!value) {\r\n    errorMessage = \"숫자를 입력해주세요\";\r\n    return \"\";\r\n  }\r\n  let flag = regex.test(value);\r\n  if (!flag) {\r\n    errorMessage = \"숫자만 입력하세요\";\r\n    //만일 숫자가 아니라면 공백을 리턴,,\r\n    return \"\";\r\n  } else if (value.length > 1) {\r\n    errorMessage = \"9이하의 숫자만 입력하세요\";\r\n    //만일 숫자가 아니라면 공백을 리턴,,\r\n    return \"\";\r\n  }\r\n  //숫자면 value를 그대로 리턴\r\n  return value;\r\n}\r\nfunction createNumberBox(array) {\r\n  let li = document.getElementById(\"box\").getElementsByTagName(\"li\");\r\n  for (var i = 0; i < array.length; i++) {\r\n    let element = `<li class='boxElement'>${array[i]}</li>`;\r\n    if (BOX_ELEMENT.length <= 0) {\r\n      document.getElementById(\"box\").innerHTML = element;\r\n    } else {\r\n      var e = document.createElement(\"li\");\r\n      var t = document.createTextNode(`${array[i]}`);\r\n      e.appendChild(t);\r\n      document.getElementById(\"box\").appendChild(e);\r\n    }\r\n    document\r\n      .getElementById(\"box\")\r\n      .getElementsByTagName(\"li\")\r\n      [i].setAttribute(\"class\", \"boxElement\");\r\n    document\r\n      .getElementById(\"box\")\r\n      .getElementsByTagName(\"li\")\r\n      [i].setAttribute(\"onclick\", `getTryingAnswer(${i})`);\r\n  }\r\n\r\n  for (var i = 0; i < li.length; i++) {\r\n    BOX_ELEMENT[i].style.width = 500 / row + \"px\";\r\n    BOX_ELEMENT[i].style.height = 500 / row + \"px\";\r\n    BOX_ELEMENT[i].style.fontSize = \"1em\";\r\n    BOX_ELEMENT[i].style.lineHeight = 500 / row + \"px\";\r\n  }\r\n}\r\nconst getTryingAnswer = (function () {\r\n  //사용자가 몇 번 클릭했는지 세어주며, 이 변수로 userAnswer와 answer의 값을 비교 예정\r\n  let answerIndex = 0;\r\n  let userAnswer = [];\r\n  //사용자가 클릭한 숫자를 userAnswer배열에 넣는 메서드\r\n  return function innerGetTryingAnswer(i) {\r\n    console.log(answerIndex);\r\n    //결과 img경로\r\n    let resultSrc = \"\";\r\n    //결과 message\r\n    let resultMessage = \"\";\r\n    userAnswer.push(event.target.innerText);\r\n    var li = document.getElementById(\"collection\");\r\n    var resultText = document.getElementById(\"resultText\");\r\n    //클로저변수를 이용해서 클릭할때마다 클로저의 변수는 ++, 이전에 answer와 입력한 값을 비교함\r\n    //만일 사용자가 틀린 답을 입력할때,\r\n    if (num.answer[answerIndex] != userAnswer[answerIndex]) {\r\n      inNOutArea(\"result\", 0);\r\n      alert(\"진실의 방으로\");\r\n      resultSrc = \"./src/assets/img/punch.png\";\r\n      resultMessage = \"한 판 더 하실?\";\r\n      //변수 초기화\r\n      userAnswer = [];\r\n      answerIndex = 0;\r\n      li.innerText = \"\";\r\n      //맞게 입력하면 closure ++할 메서드 실행! 선택한 숫자에는 입력한 숫자게 계속 들어감\r\n      //userAnswer와 answer의 길이가 같고, 마지막 값까지 같다? 그럼 통과가 됨, 한번이라도 틀리면 길이가 틀려지고, 마지막값도 같다면 완벽히 일치!\r\n    } else if (\r\n      num.answer[num.answer.length - 1] == userAnswer[userAnswer.length - 1] &&\r\n      userAnswer.length === num.answer.length\r\n    ) {\r\n      console.log(num.answer, userAnswer);\r\n      inNOutArea(\"result\", 0);\r\n      resultSrc = \"./src/assets/img/thumbsUp.png\";\r\n      resultMessage = \"잇츠 굿~~~\";\r\n      //변수 초기화\r\n      userAnswer = [];\r\n      answerIndex = 0;\r\n      li.innerText = \"\";\r\n    } else {\r\n      var text = [...userAnswer];\r\n      li.innerText = text;\r\n      answerIndex++;\r\n    }\r\n    document.getElementsByTagName(\"img\")[0].setAttribute(\"src\", `${resultSrc}`);\r\n    resultText.innerText = resultMessage;\r\n  };\r\n})();\r\n/**answer */\r\nfunction setArrow(){\r\n  (function(){\r\n//클릭시 화살표 모양 바뀌는 flag\r\nlet isAnswer = false;\r\n  if (isAnswer === true) {\r\n    changeText(\"answerInner\", `>`);\r\n    isAnswer = false;\r\n  } else {\r\n    changeText(\"answerInner\", `<`);\r\n    isAnswer = true;\r\n  }\r\n})()\r\n};\r\nfunction closePopup(flag) {\r\n  inNOutArea(\"result\", -2999);\r\n  if (flag === \"pop\" && isClosePop === true) {\r\n    inNOutArea(\"popUpWrap\", -2999);\r\n  }\r\n}\r\nfunction retry() {\r\n  num = { answer: [], question: [] };\r\n  // rowNCol = [];\r\n  // boxValue = [];\r\n  isClosePop = false;\r\n  isAnswer = false;\r\n  //에러 메세지를 저장해서, 오류 생기면 alert(errorMessage)\r\n  inNOutArea(\"popUpWrap\", 0);\r\n  changeText(\"textPop\", \"상자의 열과 행을 입력해주세요\");\r\n  showNhideArea(\"setNumArea\", \"block\");\r\n  showNhideArea(\"answerView\", \"none\");\r\n  showNhideArea(\"collect\", \"none\");\r\n  showNhideArea(\"submitPop\", \"block\");\r\n  document.getElementById(\"box\").innerHTML = \"\";\r\n  let number = document.querySelectorAll(\".setNum\");\r\n  number[0].value = \"\";\r\n  number[1].value = \"\";\r\n}\r\n\n\n//# sourceURL=webpack://numberbox/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;